// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/definition.proto

package apache.rocketmq.v2;

public interface SubscriptionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:apache.rocketmq.v2.Subscription)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Subscription settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * Consumer group.
   * </pre>
   *
   * <code>optional .apache.rocketmq.v2.Resource group = 1;</code>
   * @return Whether the group field is set.
   */
  boolean hasGroup();
  /**
   * <pre>
   * Subscription settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * Consumer group.
   * </pre>
   *
   * <code>optional .apache.rocketmq.v2.Resource group = 1;</code>
   * @return The group.
   */
  apache.rocketmq.v2.Resource getGroup();
  /**
   * <pre>
   * Subscription settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * Consumer group.
   * </pre>
   *
   * <code>optional .apache.rocketmq.v2.Resource group = 1;</code>
   */
  apache.rocketmq.v2.ResourceOrBuilder getGroupOrBuilder();

  /**
   * <pre>
   * Subscription for consumer.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  java.util.List<apache.rocketmq.v2.SubscriptionEntry> 
      getSubscriptionsList();
  /**
   * <pre>
   * Subscription for consumer.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  apache.rocketmq.v2.SubscriptionEntry getSubscriptions(int index);
  /**
   * <pre>
   * Subscription for consumer.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  int getSubscriptionsCount();
  /**
   * <pre>
   * Subscription for consumer.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  java.util.List<? extends apache.rocketmq.v2.SubscriptionEntryOrBuilder> 
      getSubscriptionsOrBuilderList();
  /**
   * <pre>
   * Subscription for consumer.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  apache.rocketmq.v2.SubscriptionEntryOrBuilder getSubscriptionsOrBuilder(
      int index);

  /**
   * <pre>
   * Subscription settings below here are from server, it is essential for
   * server to push.
   * When FIFO flag is `true`, messages of the same message group are processed
   * in first-in-first-out manner.
   * Brokers will not deliver further messages of the same group until prior
   * ones are completely acknowledged.
   * </pre>
   *
   * <code>optional bool fifo = 3;</code>
   * @return Whether the fifo field is set.
   */
  boolean hasFifo();
  /**
   * <pre>
   * Subscription settings below here are from server, it is essential for
   * server to push.
   * When FIFO flag is `true`, messages of the same message group are processed
   * in first-in-first-out manner.
   * Brokers will not deliver further messages of the same group until prior
   * ones are completely acknowledged.
   * </pre>
   *
   * <code>optional bool fifo = 3;</code>
   * @return The fifo.
   */
  boolean getFifo();

  /**
   * <pre>
   * Message receive batch size here is essential for push consumer.
   * </pre>
   *
   * <code>optional int32 receive_batch_size = 4;</code>
   * @return Whether the receiveBatchSize field is set.
   */
  boolean hasReceiveBatchSize();
  /**
   * <pre>
   * Message receive batch size here is essential for push consumer.
   * </pre>
   *
   * <code>optional int32 receive_batch_size = 4;</code>
   * @return The receiveBatchSize.
   */
  int getReceiveBatchSize();

  /**
   * <pre>
   * Long-polling timeout for `ReceiveMessageRequest`, which is essential for
   * push consumer.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration long_polling_timeout = 5;</code>
   * @return Whether the longPollingTimeout field is set.
   */
  boolean hasLongPollingTimeout();
  /**
   * <pre>
   * Long-polling timeout for `ReceiveMessageRequest`, which is essential for
   * push consumer.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration long_polling_timeout = 5;</code>
   * @return The longPollingTimeout.
   */
  com.google.protobuf.Duration getLongPollingTimeout();
  /**
   * <pre>
   * Long-polling timeout for `ReceiveMessageRequest`, which is essential for
   * push consumer.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration long_polling_timeout = 5;</code>
   */
  com.google.protobuf.DurationOrBuilder getLongPollingTimeoutOrBuilder();
}
