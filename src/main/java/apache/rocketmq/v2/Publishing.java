// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/definition.proto

package apache.rocketmq.v2;

/**
 * Protobuf type {@code apache.rocketmq.v2.Publishing}
 */
public final class Publishing extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:apache.rocketmq.v2.Publishing)
    PublishingOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Publishing.newBuilder() to construct.
  private Publishing(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Publishing() {
    topics_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Publishing();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Publishing(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              topics_ = new java.util.ArrayList<apache.rocketmq.v2.Resource>();
              mutable_bitField0_ |= 0x00000001;
            }
            topics_.add(
                input.readMessage(apache.rocketmq.v2.Resource.parser(), extensionRegistry));
            break;
          }
          case 16: {

            maxBodySize_ = input.readInt32();
            break;
          }
          case 24: {

            validateMessageType_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        topics_ = java.util.Collections.unmodifiableList(topics_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Publishing_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Publishing_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            apache.rocketmq.v2.Publishing.class, apache.rocketmq.v2.Publishing.Builder.class);
  }

  public static final int TOPICS_FIELD_NUMBER = 1;
  private java.util.List<apache.rocketmq.v2.Resource> topics_;
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  @java.lang.Override
  public java.util.List<apache.rocketmq.v2.Resource> getTopicsList() {
    return topics_;
  }
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends apache.rocketmq.v2.ResourceOrBuilder> 
      getTopicsOrBuilderList() {
    return topics_;
  }
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  @java.lang.Override
  public int getTopicsCount() {
    return topics_.size();
  }
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.Resource getTopics(int index) {
    return topics_.get(index);
  }
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ResourceOrBuilder getTopicsOrBuilder(
      int index) {
    return topics_.get(index);
  }

  public static final int MAX_BODY_SIZE_FIELD_NUMBER = 2;
  private int maxBodySize_;
  /**
   * <pre>
   * If the message body size exceeds `max_body_size`, broker servers would
   * reject the request. As a result, it is advisable that Producer performs
   * client-side check validation.
   * </pre>
   *
   * <code>int32 max_body_size = 2;</code>
   * @return The maxBodySize.
   */
  @java.lang.Override
  public int getMaxBodySize() {
    return maxBodySize_;
  }

  public static final int VALIDATE_MESSAGE_TYPE_FIELD_NUMBER = 3;
  private boolean validateMessageType_;
  /**
   * <pre>
   * When `validate_message_type` flag set `false`, no need to validate message's type
   * with messageQueue's `accept_message_types` before publishing.
   * </pre>
   *
   * <code>bool validate_message_type = 3;</code>
   * @return The validateMessageType.
   */
  @java.lang.Override
  public boolean getValidateMessageType() {
    return validateMessageType_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < topics_.size(); i++) {
      output.writeMessage(1, topics_.get(i));
    }
    if (maxBodySize_ != 0) {
      output.writeInt32(2, maxBodySize_);
    }
    if (validateMessageType_ != false) {
      output.writeBool(3, validateMessageType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < topics_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, topics_.get(i));
    }
    if (maxBodySize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, maxBodySize_);
    }
    if (validateMessageType_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, validateMessageType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof apache.rocketmq.v2.Publishing)) {
      return super.equals(obj);
    }
    apache.rocketmq.v2.Publishing other = (apache.rocketmq.v2.Publishing) obj;

    if (!getTopicsList()
        .equals(other.getTopicsList())) return false;
    if (getMaxBodySize()
        != other.getMaxBodySize()) return false;
    if (getValidateMessageType()
        != other.getValidateMessageType()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTopicsCount() > 0) {
      hash = (37 * hash) + TOPICS_FIELD_NUMBER;
      hash = (53 * hash) + getTopicsList().hashCode();
    }
    hash = (37 * hash) + MAX_BODY_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getMaxBodySize();
    hash = (37 * hash) + VALIDATE_MESSAGE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getValidateMessageType());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static apache.rocketmq.v2.Publishing parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.Publishing parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Publishing parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Publishing parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(apache.rocketmq.v2.Publishing prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code apache.rocketmq.v2.Publishing}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:apache.rocketmq.v2.Publishing)
      apache.rocketmq.v2.PublishingOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Publishing_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Publishing_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apache.rocketmq.v2.Publishing.class, apache.rocketmq.v2.Publishing.Builder.class);
    }

    // Construct using apache.rocketmq.v2.Publishing.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTopicsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (topicsBuilder_ == null) {
        topics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        topicsBuilder_.clear();
      }
      maxBodySize_ = 0;

      validateMessageType_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Publishing_descriptor;
    }

    @java.lang.Override
    public apache.rocketmq.v2.Publishing getDefaultInstanceForType() {
      return apache.rocketmq.v2.Publishing.getDefaultInstance();
    }

    @java.lang.Override
    public apache.rocketmq.v2.Publishing build() {
      apache.rocketmq.v2.Publishing result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public apache.rocketmq.v2.Publishing buildPartial() {
      apache.rocketmq.v2.Publishing result = new apache.rocketmq.v2.Publishing(this);
      int from_bitField0_ = bitField0_;
      if (topicsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          topics_ = java.util.Collections.unmodifiableList(topics_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.topics_ = topics_;
      } else {
        result.topics_ = topicsBuilder_.build();
      }
      result.maxBodySize_ = maxBodySize_;
      result.validateMessageType_ = validateMessageType_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof apache.rocketmq.v2.Publishing) {
        return mergeFrom((apache.rocketmq.v2.Publishing)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(apache.rocketmq.v2.Publishing other) {
      if (other == apache.rocketmq.v2.Publishing.getDefaultInstance()) return this;
      if (topicsBuilder_ == null) {
        if (!other.topics_.isEmpty()) {
          if (topics_.isEmpty()) {
            topics_ = other.topics_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTopicsIsMutable();
            topics_.addAll(other.topics_);
          }
          onChanged();
        }
      } else {
        if (!other.topics_.isEmpty()) {
          if (topicsBuilder_.isEmpty()) {
            topicsBuilder_.dispose();
            topicsBuilder_ = null;
            topics_ = other.topics_;
            bitField0_ = (bitField0_ & ~0x00000001);
            topicsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTopicsFieldBuilder() : null;
          } else {
            topicsBuilder_.addAllMessages(other.topics_);
          }
        }
      }
      if (other.getMaxBodySize() != 0) {
        setMaxBodySize(other.getMaxBodySize());
      }
      if (other.getValidateMessageType() != false) {
        setValidateMessageType(other.getValidateMessageType());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      apache.rocketmq.v2.Publishing parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (apache.rocketmq.v2.Publishing) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<apache.rocketmq.v2.Resource> topics_ =
      java.util.Collections.emptyList();
    private void ensureTopicsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        topics_ = new java.util.ArrayList<apache.rocketmq.v2.Resource>(topics_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder> topicsBuilder_;

    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public java.util.List<apache.rocketmq.v2.Resource> getTopicsList() {
      if (topicsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(topics_);
      } else {
        return topicsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public int getTopicsCount() {
      if (topicsBuilder_ == null) {
        return topics_.size();
      } else {
        return topicsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public apache.rocketmq.v2.Resource getTopics(int index) {
      if (topicsBuilder_ == null) {
        return topics_.get(index);
      } else {
        return topicsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder setTopics(
        int index, apache.rocketmq.v2.Resource value) {
      if (topicsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTopicsIsMutable();
        topics_.set(index, value);
        onChanged();
      } else {
        topicsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder setTopics(
        int index, apache.rocketmq.v2.Resource.Builder builderForValue) {
      if (topicsBuilder_ == null) {
        ensureTopicsIsMutable();
        topics_.set(index, builderForValue.build());
        onChanged();
      } else {
        topicsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder addTopics(apache.rocketmq.v2.Resource value) {
      if (topicsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTopicsIsMutable();
        topics_.add(value);
        onChanged();
      } else {
        topicsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder addTopics(
        int index, apache.rocketmq.v2.Resource value) {
      if (topicsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTopicsIsMutable();
        topics_.add(index, value);
        onChanged();
      } else {
        topicsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder addTopics(
        apache.rocketmq.v2.Resource.Builder builderForValue) {
      if (topicsBuilder_ == null) {
        ensureTopicsIsMutable();
        topics_.add(builderForValue.build());
        onChanged();
      } else {
        topicsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder addTopics(
        int index, apache.rocketmq.v2.Resource.Builder builderForValue) {
      if (topicsBuilder_ == null) {
        ensureTopicsIsMutable();
        topics_.add(index, builderForValue.build());
        onChanged();
      } else {
        topicsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder addAllTopics(
        java.lang.Iterable<? extends apache.rocketmq.v2.Resource> values) {
      if (topicsBuilder_ == null) {
        ensureTopicsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, topics_);
        onChanged();
      } else {
        topicsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder clearTopics() {
      if (topicsBuilder_ == null) {
        topics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        topicsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public Builder removeTopics(int index) {
      if (topicsBuilder_ == null) {
        ensureTopicsIsMutable();
        topics_.remove(index);
        onChanged();
      } else {
        topicsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public apache.rocketmq.v2.Resource.Builder getTopicsBuilder(
        int index) {
      return getTopicsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public apache.rocketmq.v2.ResourceOrBuilder getTopicsOrBuilder(
        int index) {
      if (topicsBuilder_ == null) {
        return topics_.get(index);  } else {
        return topicsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public java.util.List<? extends apache.rocketmq.v2.ResourceOrBuilder> 
         getTopicsOrBuilderList() {
      if (topicsBuilder_ != null) {
        return topicsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(topics_);
      }
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public apache.rocketmq.v2.Resource.Builder addTopicsBuilder() {
      return getTopicsFieldBuilder().addBuilder(
          apache.rocketmq.v2.Resource.getDefaultInstance());
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public apache.rocketmq.v2.Resource.Builder addTopicsBuilder(
        int index) {
      return getTopicsFieldBuilder().addBuilder(
          index, apache.rocketmq.v2.Resource.getDefaultInstance());
    }
    /**
     * <pre>
     * Publishing settings below here is appointed by client, thus it is
     * unnecessary for server to push at present.
     * List of topics to which messages will publish to.
     * </pre>
     *
     * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
     */
    public java.util.List<apache.rocketmq.v2.Resource.Builder> 
         getTopicsBuilderList() {
      return getTopicsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder> 
        getTopicsFieldBuilder() {
      if (topicsBuilder_ == null) {
        topicsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder>(
                topics_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        topics_ = null;
      }
      return topicsBuilder_;
    }

    private int maxBodySize_ ;
    /**
     * <pre>
     * If the message body size exceeds `max_body_size`, broker servers would
     * reject the request. As a result, it is advisable that Producer performs
     * client-side check validation.
     * </pre>
     *
     * <code>int32 max_body_size = 2;</code>
     * @return The maxBodySize.
     */
    @java.lang.Override
    public int getMaxBodySize() {
      return maxBodySize_;
    }
    /**
     * <pre>
     * If the message body size exceeds `max_body_size`, broker servers would
     * reject the request. As a result, it is advisable that Producer performs
     * client-side check validation.
     * </pre>
     *
     * <code>int32 max_body_size = 2;</code>
     * @param value The maxBodySize to set.
     * @return This builder for chaining.
     */
    public Builder setMaxBodySize(int value) {
      
      maxBodySize_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the message body size exceeds `max_body_size`, broker servers would
     * reject the request. As a result, it is advisable that Producer performs
     * client-side check validation.
     * </pre>
     *
     * <code>int32 max_body_size = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxBodySize() {
      
      maxBodySize_ = 0;
      onChanged();
      return this;
    }

    private boolean validateMessageType_ ;
    /**
     * <pre>
     * When `validate_message_type` flag set `false`, no need to validate message's type
     * with messageQueue's `accept_message_types` before publishing.
     * </pre>
     *
     * <code>bool validate_message_type = 3;</code>
     * @return The validateMessageType.
     */
    @java.lang.Override
    public boolean getValidateMessageType() {
      return validateMessageType_;
    }
    /**
     * <pre>
     * When `validate_message_type` flag set `false`, no need to validate message's type
     * with messageQueue's `accept_message_types` before publishing.
     * </pre>
     *
     * <code>bool validate_message_type = 3;</code>
     * @param value The validateMessageType to set.
     * @return This builder for chaining.
     */
    public Builder setValidateMessageType(boolean value) {
      
      validateMessageType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When `validate_message_type` flag set `false`, no need to validate message's type
     * with messageQueue's `accept_message_types` before publishing.
     * </pre>
     *
     * <code>bool validate_message_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearValidateMessageType() {
      
      validateMessageType_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:apache.rocketmq.v2.Publishing)
  }

  // @@protoc_insertion_point(class_scope:apache.rocketmq.v2.Publishing)
  private static final apache.rocketmq.v2.Publishing DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new apache.rocketmq.v2.Publishing();
  }

  public static apache.rocketmq.v2.Publishing getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Publishing>
      PARSER = new com.google.protobuf.AbstractParser<Publishing>() {
    @java.lang.Override
    public Publishing parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Publishing(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Publishing> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Publishing> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public apache.rocketmq.v2.Publishing getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

